387. 字符串中的第一个唯一字符
class Solution:
    def firstUniqChar(self, s: str) -> int:
        dic = {}
        for i in range(len(s)):
            if s[i] in dic:
                dic[s[i]][0] += 1
            else:
                dic[s[i]] = [1,i]
        
        for key,val in dic.items():
            if val[0] == 1:
                return val[1]
        
        return -1
        
36. 有效的数独
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        matrix_line = [set() for i in range(9)]
        matrix_column = [set() for i in range(9)]
        matrix_area = [set() for i in range(9)]
        for i in range(9):
            for j in range(9):
                item = board[i][j]
                pos = (i//3)*3 + j //3
                if item != '.':
                    if item not in matrix_line[i] and item not in matrix_column[j] and item not in matrix_area[pos]:
                        matrix_line[i].add(item)
                        matrix_column[j].add(item)
                        matrix_area[pos].add(item)
                    else:
                        return False
        return True
        
652. 寻找重复的子树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:
        if not root:
            return []
        self.res = []
        self.dic = {}
        self.temp = []
        
        def preorder_traverse(node):
            if not node:
                self.temp.append('#')
                return

            self.temp.append(node.val)
            preorder_traverse(node.left)
            preorder_traverse(node.right)
        
        def dfs(node):
            if not node:
                return
            self.temp = []
            preorder_traverse(node)
            if self.temp in self.dic.values():
                for key,val in self.dic.items():
                    if val == self.temp:
                        result = key
                        if result not in self.res:
                            self.res.append(result)
                        break
            else:
                self.dic[node] = self.temp
            dfs(node.left)
            dfs(node.right)
        
        dfs(root)
        return self.res
        
337. 打家劫舍 III
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        def calculate(node):
            if not node:
                return 0,0
            
            l_select, l_unselect = calculate(node.left)
            r_select, r_unselect = calculate(node.right)

            return node.val + l_unselect + r_unselect, max(l_select,l_unselect)+max(r_select, r_unselect)
        
        return max(calculate(root))
        
123. 买卖股票的最佳时机 III
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices)<2:
            return 0
        
        buy1 = buy2 = -prices[0]
        sell1 = sell2 = 0
        for i in range(1,len(prices)):
            buy1 = max(buy1, -prices[i])
            sell1 = max(sell1, buy1+prices[i])
            buy2 = max(buy2, sell1-prices[i])
            sell2 = max(sell2, buy2+prices[i])
        
        return sell2
        
(extra) 188. 买卖股票的最佳时机 IV

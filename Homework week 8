1046. 最后一块石头的重量
class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        heap = []
        for val in stones:
            heapq.heappush(heap,-val)
        

        while len(heap)>1:
            x,y = heapq.heappop(heap), heapq.heappop(heap)
            dif = y-x
            if dif>0:
                heapq.heappush(heap,-dif)

        return -heap[0] if len(heap)==1 else 0
       
973. 最接近原点的 K 个点
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        dic = {}

        for i,item in enumerate(points):
            x,y = item
            d = math.sqrt((x**2+y**2))
            dic[i] = [[x,y],d]
        
        temp = sorted(dic.values(), key = lambda x:x[1])
        res = []
        for i in range(k):
            res.append(temp[i][0])
        
        return res
        
767. 重构字符串
class Solution:
    def reorganizeString(self, s: str) -> str:
        if len(s) < 2:
            return s
        
        dic = {}
        for word in s:
            if word in dic.keys():
                dic[word] += 1
            else:
                dic[word] = 1

        maxCount = max(dic.items(), key=lambda x: x[1])[1]
        if maxCount > (len(s) + 1) // 2:
            return ""

        heap = [(-val,key) for key,val in dic.items()]
        heapq.heapify(heap)
        res = ''

        while len(heap) > 1:
            val1,l1 = heapq.heappop(heap)
            val2,l2 = heapq.heappop(heap)
            res += l1
            res += l2
            dic[l1] -= 1
            dic[l2] -= 1
            if dic[l1]:
                heapq.heappush(heap,(-dic[l1],l1))
            if dic[l2]:
                heapq.heappush(heap,(-dic[l2],l2))
            
        if heap:
            res += heap[0][1]

        return res
        
239. 滑动窗口最大值
#单调队列
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        
        queue = []
        for i in range(k):
            if not queue:
                queue.append(nums[i])
            else:
                while queue and nums[i] > queue[-1]:
                    queue.pop()
                queue.append(nums[i])
        res = [queue[0]]

        left = 1
        right = left + k -1
        while right<len(nums):
            if nums[left-1] == queue[0]:
                queue.pop(0)
            while queue and nums[right] > queue[-1]:
                queue.pop()
            queue.append(nums[right])
            res.append(queue[0])
            left += 1
            right += 1
        
        return res

#优先队列（堆）
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []
        
        heap = [(-nums[i],i) for i in range(k)]
        heapq.heapify(heap)
        res = [-heap[0][0]]

        right = k
        while right < len(nums):
            heapq.heappush(heap,(-nums[right],right))
            while heap[0][1] <= right-k:
                heapq.heappop(heap)
            res.append(-heap[0][0])
            right += 1
        
        return res
        
23. 合并K个升序链表
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists:
            return None
        
        res = []
        for i in range(len(lists)):
            cur = lists[i]
            while cur:
                res.append(cur.val)
                cur = cur.next
        
        res.sort()
        dummy = ListNode()
        cur = dummy
        for i in range(len(res)):
            node = ListNode(res[i])
            cur.next = node
            cur = cur.next
        
        return dummy.next

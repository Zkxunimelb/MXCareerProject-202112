Leetcode71. 简化路径
class Solution:
    def simplifyPath(self, path: str) -> str:
        if not path:
            return ''
        
        s =path.split('/')
        stack = []
        for word in s:
            if word == '..':
                if stack:
                    stack.pop()
            elif word and word != '.':
                stack.append(word)
        
        return '/'+'/'.join(stack)

Leetcode93. 复原 IP 地址
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        self.ansLst = []
        self.backTracking([], s)
        self.ans = []
        for lst in self.ansLst:
            self.ans.append('.'.join(lst))
        return self.ans
    
    def backTracking(self, lst, s):
        if s == '':
            if len(lst) == 4:
                self.ansLst.append(lst)
        elif s != '':
            if s[0] == '0':
                self.backTracking(lst+['0'], s[1:])
            else:
                for i in range(3):
                    if (i+1) + (4 - len(lst) - 1) * 3 > len(s) - (i+1):
                        if i < len(s) and eval(s[0:i+1]) <= 255:
                            self.backTracking(lst + [s[0:i+1]], s[i+1:])
  
Leetcode1052. 爱生气的书店老板
class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
        if not customers:
            return 0
        if minutes >= len(customers):
            return sum(customers)
        
        temp = [0]*len(customers)
        for i in range(len(customers)):
            if grumpy[i] == 0:
                temp[i] = customers[i]
            else:
                temp[i] = 0
        
        dif = []
        slow = 0
        fast = slow + minutes-1
        while fast < len(customers):
            d = sum(customers[slow:fast+1]) - sum(temp[slow:fast+1])
            dif.append(d)
            slow += 1
            fast += 1
        
        return sum(temp) + max(dif)

Leetcode1423. 可获得的最大点数
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        if k >= len(cardPoints):
            return sum(cardPoints)
        
        temp = cardPoints[len(cardPoints)-k:len(cardPoints)] + cardPoints[0:k]
        slow = 0
        fast = slow+k-1
        res = [sum(temp[slow:fast+1])]
        while fast<len(temp):
            if slow == 0:
                slow += 1
                fast += 1
                continue
            m = res[-1] - temp[slow-1]+temp[fast]
            res.append(m)
            slow += 1
            fast += 1
        return max(res)

Leetcode725. 分隔链表
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: ListNode, k: int) -> List[ListNode]:
        count = 0
        node = head
        while node:
            count += 1
            node = node.next
        size, remain = count // k, count % k

        res = [None for _ in range(k)]
        i, cur = 0, head
        while i < k and cur:
            res[i] = cur
            part_size = size + (1 if i < remain else 0)
            for _ in range(part_size - 1):
                cur = cur.next
            next = cur.next
            cur.next = None
            cur = next
            i += 1
        return res
  
Leetcode10. 正则表达式匹配（extra）

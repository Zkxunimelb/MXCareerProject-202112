Leetcode105. 从前序与中序遍历序列构造二叉树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        def creat(pre_left, pre_right, in_left, in_right):
            if pre_left > pre_right:
                return
            root = TreeNode(preorder[pre_left])
            in_root_index = inorder.index(preorder[pre_left])
            left_length = in_root_index-in_left

            root.left = creat(pre_left+1, pre_left+left_length, in_left,in_root_index-1)
            root.right = creat(pre_left+left_length+1,pre_right,in_root_index+1,in_right)

            return root
        
        return creat(0,len(inorder)-1, 0, len(inorder)-1)

Leetcode226. 翻转二叉树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return 
        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)
        return root

Leetcode437. 路径总和 III
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: TreeNode, targetSum: int) -> int:
        def count(node, targetSum):
            if node is None:
                return 0

            res = 0
            if node.val == targetSum:
                res += 1

            res += count(node.left, targetSum - node.val)
            res += count(node.right, targetSum - node.val)
            return res
        
        if root is None:
            return 0
            
        result = count(root, targetSum)
        result += self.pathSum(root.left, targetSum)
        result += self.pathSum(root.right, targetSum)
        return result
        
Leetcode236. 二叉树的最近公共祖先
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def find(node,p,q):
            if not node or node == p or node == q:
                return node
            
            left = find(node.left,p,q)
            right = find(node.right,p,q)
            if left and right:
                return node
            if left:
                return left
            else:
                return right
        
        return find(root,p,q)
    
Leetcode103. 二叉树的锯齿形层序遍历
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        count = 0
        queue = [root]
        res = []
        while queue:
            l = len(queue)
            temp = []
            for i in range(l):
                item = queue.pop(0)
                temp.append(item.val)
                if item.left:
                    queue.append(item.left)
                if item.right:
                    queue.append(item.right)
            if count%2 == 0:
                res.append(temp)
            else:
                temp.reverse()
                res.append(temp)
            count += 1
        return res
        
Leetcode (extra)124. 二叉树中的最大路径和

99. 恢复二叉搜索树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        stack = []
        def in_order(node):
            if not node:
                return
            in_order(node.left)
            stack.append(node)
            in_order(node.right)
        
        in_order(root)
        x = None
        y = None
        for i in range(len(stack)-1):
            if stack[i].val > stack[i+1].val:
                if not x:
                    x = stack[i]
                    y = stack[i+1]
                else:
                    y = stack[i+1]
        if x and y:
            x.val,y.val = y.val,x.val
            
199. 二叉树的右视图
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        
        queue = [root]
        res = []
        while queue:
            l = len(queue)
            for i in range(l):
                item = queue.pop(0)
                if i == 0:
                    res.append(item.val)
                if item.right:
                    queue.append(item.right)
                if item.left:
                    queue.append(item.left)
        
        return res
        
1609. 奇偶树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isEvenOddTree(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return True
        
        level = 0
        queue = [root]

        while queue:
            temp = []
            l = len(queue)
            for i in range(l):
                item = queue.pop(0)

                if level%2 == 0:
                    if item.val%2 != 1:
                        return False
                    else:
                        if i == 0:
                            temp.append(item.val)
                        else:
                            if item.val <= temp[-1]:
                                return False
                            else:
                                temp.append(item.val)
                else:
                    if item.val%2 == 1:
                        return False
                    else:
                        if i == 0:
                            temp.append(item.val)
                        else:
                            if item.val >= temp[-1]:
                                return False
                            else:
                                temp.append(item.val)
                
                if item.left:
                    queue.append(item.left)
                if item.right:
                    queue.append(item.right)

            level += 1
        return True
        
538. 把二叉搜索树转换为累加树
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        def count(node,res):
            if not node:
                return res 
            right_result = count(node.right,res)
            node.val += right_result
            left_result = count(node.left,node.val)
            return left_result
            
        count(root,0)
        return root
        
139. 单词拆分
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False]*(len(s)+1)
        dp[0] = True
        for i in range(len(dp)-1):
            for j in range(i+1, len(dp)):
                if dp[i] and s[i:j] in wordDict:
                    dp[j] = True
        return dp[-1]
        
(extra)987. 二叉树的垂序遍历
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.dic = {}

    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        def traverse(node,row,coloumn):
            if not node:
                return
            if coloumn in self.dic.keys():
                self.dic[coloumn].append([row,node.val])
            else:
                self.dic[coloumn] = [[row,node.val]]
            traverse(node.left,row+1,coloumn-1)
            traverse(node.right,row+1,coloumn+1)
        
        traverse(root,0,0)
        res = []
        info = sorted(self.dic.items(), key = lambda v:v[0])
        for values in info:
            value = values[1]
            temp = []
            a = sorted(value, key = lambda x:(x[0], x[1]))
            for item in a:
                temp.append(item[1])
            res.append(temp)
        return res

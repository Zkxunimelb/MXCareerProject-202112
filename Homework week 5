Leetcode225.用队列实现栈
class MyStack:

    def __init__(self):
        self.queue1 = []
        self.queue2 = []

    def push(self, x: int) -> None:
        if not self.queue1:
            self.queue2.append(x)
        else:
            self.queue1.append(x)

    def pop(self) -> int:
        if not self.queue1:
            while len(self.queue2)>1:
                self.queue1.append(self.queue2.pop(0))
            return self.queue2.pop()
        else:
            while len(self.queue1)>1:
                self.queue2.append(self.queue1.pop(0))
            return self.queue1.pop()

    def top(self) -> int:
        if self.queue1:
            return self.queue1[-1]
        else:
            return self.queue2[-1]
            
    def empty(self) -> bool:
        if not self.queue1 and not self.queue2:
            return True
        else:
            return False
            
Leetcode678. 有效的括号字符串
class Solution:
    def checkValidString(self, s: str) -> bool:
        if not s:
            return True
        
        stack_parenthese = []
        stack_asterisk = []
        s_list = list(s)
        for i in range(len(s_list)):
            if s_list[i] == '(':
                stack_parenthese.append(i)
            elif s_list[i] == '*':
                stack_asterisk.append(i)
            elif s_list[i] == ')':
                if stack_parenthese:
                    stack_parenthese.pop()
                elif stack_asterisk:
                    stack_asterisk.pop()
                else:
                    return False
        
        if len(stack_parenthese)>len(stack_asterisk):
            return False
        else:
            while stack_parenthese:
                if stack_parenthese[-1] < stack_asterisk[-1]:
                    stack_parenthese.pop()
                    stack_asterisk.pop()
                else:
                    return False
            return True
            
Leetcode316. 去除重复字母
class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        dic = {}
        for c in s:
            if c in dic.keys():
                dic[c] += 1
            else:
                dic[c] = 1
        
        stack = []
        for c in s:
            if c not in stack:
                while stack and c < stack[-1] and dic[stack[-1]] > 0:
                    stack.pop()
                stack.append(c)
            dic[c] -= 1
        
        return ''.join(stack)

剑指 Offer 13. 机器人的运动范围
class Solution:
    def movingCount(self, m: int, n: int, k: int) -> int:
        def calculate(n):
            res = 0
            while n:
                res += n%10
                n = n//10
            return res
        
        def find(i,j):
            if not 0<= i < m or not 0<= j < n or calculate(i)+calculate(j)>k or [i,j] in visted:
                return
            visted.append([i,j])
            for x,y in [[1,0],[-1,0],[0,1],[0,-1]]:
                find(i+x,j+y)
        
        visted = []
        find(0,0)
        return len(visted)
        
Leetcode695. 岛屿的最大面积
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        
        def find(i,j):
            if not 0<=i <len(grid) or not 0<=j <len(grid[0]) or grid[i][j] == 0:
                return 0
            
            s = 1
            grid[i][j] = 0
            return s+find(i+1,j)+find(i-1,j)+find(i,j-1)+find(i,j+1)
        
        res = []
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    res.append(find(i,j))
        
        return max(res) if res else 0
       
Leetcode42.接雨水（extra）
class Solution:
    def trap(self, height: List[int]) -> int:
        ans = 0
        stack = list()
        n = len(height)
        
        for i, h in enumerate(height):
            while stack and h > height[stack[-1]]:
                top = stack.pop()
                if not stack:
                    break
                left = stack[-1]
                currWidth = i - left - 1
                currHeight = min(height[left], height[i]) - height[top]
                ans += currWidth * currHeight
            stack.append(i)
        
        return ans

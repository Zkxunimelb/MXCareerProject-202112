Leetcode203. 移除链表元素
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        dummy = ListNode()
        dummy.next = head
        pre, cur = dummy, head
        while cur:
            if cur.val == val:
                pre.next = cur.next
                cur = cur.next
            else:
                pre = cur
                cur = cur.next
        return dummy.next

Leetcode2. 两数相加
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        list1 = []
        list2 = []
        cur1 = l1
        cur2 = l2
        while cur1:
            list1.append(str(cur1.val))
            cur1 = cur1.next
        while cur2:
            list2.append(str(cur2.val))
            cur2 = cur2.next
        res_int = int(''.join(reversed(list1))) + int(''.join(reversed(list2)))

        if res_int == 0:
            return ListNode(0)
        res_list = []
        while res_int:
            rest = res_int%10
            res_list.append(rest)
            res_int = res_int//10
        
        dummy = ListNode()
        pre = dummy
        for i in range(len(res_list)):
            cur = ListNode(res_list[i])
            pre.next = cur
            pre = pre.next
        return dummy.next

Leetcode61. 旋转链表
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head:
            return None

        count = 0
        temp = head
        while temp:
            count += 1
            temp = temp.next
        k = k%count
        
        pre = head
        cur = head
        for i in range(k):
            cur = cur.next
        while cur.next:
            pre = pre.next
            cur = cur.next
        cur.next = head
        head = pre.next
        pre.next = None
        return head
        
Leetcode328. 奇偶链表
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: ListNode) -> ListNode:
        if not head:
            return head
        odd, even = head, head.next
        pre, cur = odd, even
        while cur:
            if cur.next:
                pre.next = cur.next
                cur.next = cur.next.next
                pre = pre.next
                cur = cur.next
            else:
                cur = cur.next
        pre.next = even
        return odd

Leetcode138. 复制带随机指针的链表
"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if not head:
            return None
        dic = {}
        cur = head
        while cur:
            dic[cur] = Node(cur.val)
            cur = cur.next
        cur = head
        while cur:
            dic[cur].next = dic.get(cur.next)
            dic[cur].random = dic.get(cur.random)
            cur = cur.next
        return dic[head]
